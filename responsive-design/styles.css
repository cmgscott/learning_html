/* this was created followingt a tutorial from interneting is hard */
/* keeping base styles outside of the media queries means it is easy to change globally if necessary */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.page {
    display: flex;
    flex-wrap: wrap;
}

.section {
    width: 100%;
    height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.menu {
    background-color: #5995DA;
    height: 80px;
}

.header {
    background-color: #B2D6FF;
}

.content {
    background-color: #EAEDF0;
    height: 600px;
}

.sign-up {
    background-color: #D6E9FE;
}

.feature-1 {
    background-color: #F5CF8E;
}

.feature-2 {
    background-color: #F09A9D;
}

.feature-3 {
    background-color: #C8C6FA;
}

/* tells chrome to always file the width of its container */
.illustration {
    width: 100%;
    display: block;
}

.header {
    height: auto;
    justify-content: inherit;
    align-items: inherit;
}

.photo img {
    width: 100%;
    display: block;
}

/* media queries always begin with the @media at-rule followed by some kind of contidional statement, the curly
braces. the format is @media media-type and media-feature { css rules }
 only screen means only applied to devices with screens, not when doc is for print e.g.
 for reference: https://developer.mozilla.org/en-US/docs/Web/CSS/@media */
/* Mobile Styles */
@media only screen and (max-width: 400px) {
    body {
        background-color: #F09A9D; /* Red */
    }
}

/* Tablet Styles */
@media only screen and (min-width: 401px) and (max-width: 960px) {
    .sign-up,
    .feature-1,
    .feature-2,
    .feature-3 {
        width: 50%; /* makes the flex items be half the screen, flex-wrap wraps */
    }
}

/* Desktop Styles */
@media only screen and (min-width: 961px) {
    .page {
        width: 960px;
        margin: 0 auto; /* center it with auto-margins */
    }
    .feature-1,
    .feature-2,
    .feature-3 {
        width: 33.3%;
    }
    .header {
        height: 400px;
    }
    /* using the order attribute to rearrange flex items */
    .sign-up {
        height: 200px;
        order: 1;
    }
    .content {
        order: 2;
    }
}